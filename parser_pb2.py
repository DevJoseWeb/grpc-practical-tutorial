# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: parser.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='parser.proto',
  package='twittertext',
  syntax='proto3',
  serialized_pb=_b('\n\x0cparser.proto\x12\x0btwittertext\"\x1c\n\x0cTweetRequest\x12\x0c\n\x04text\x18\x01 \x01(\t\";\n\x0eParsedResponse\x12\r\n\x05users\x18\x01 \x03(\t\x12\x0c\n\x04tags\x18\x02 \x03(\t\x12\x0c\n\x04urls\x18\x03 \x03(\t2P\n\x0bTwitterText\x12\x41\n\x05Parse\x12\x19.twittertext.TweetRequest\x1a\x1b.twittertext.ParsedResponse\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_TWEETREQUEST = _descriptor.Descriptor(
  name='TweetRequest',
  full_name='twittertext.TweetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='text', full_name='twittertext.TweetRequest.text', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=29,
  serialized_end=57,
)


_PARSEDRESPONSE = _descriptor.Descriptor(
  name='ParsedResponse',
  full_name='twittertext.ParsedResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='users', full_name='twittertext.ParsedResponse.users', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tags', full_name='twittertext.ParsedResponse.tags', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='urls', full_name='twittertext.ParsedResponse.urls', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=59,
  serialized_end=118,
)

DESCRIPTOR.message_types_by_name['TweetRequest'] = _TWEETREQUEST
DESCRIPTOR.message_types_by_name['ParsedResponse'] = _PARSEDRESPONSE

TweetRequest = _reflection.GeneratedProtocolMessageType('TweetRequest', (_message.Message,), dict(
  DESCRIPTOR = _TWEETREQUEST,
  __module__ = 'parser_pb2'
  # @@protoc_insertion_point(class_scope:twittertext.TweetRequest)
  ))
_sym_db.RegisterMessage(TweetRequest)

ParsedResponse = _reflection.GeneratedProtocolMessageType('ParsedResponse', (_message.Message,), dict(
  DESCRIPTOR = _PARSEDRESPONSE,
  __module__ = 'parser_pb2'
  # @@protoc_insertion_point(class_scope:twittertext.ParsedResponse)
  ))
_sym_db.RegisterMessage(ParsedResponse)


import abc
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaTwitterTextServicer(object):
  """<fill me in later!>"""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Parse(self, request, context):
    raise NotImplementedError()

class BetaTwitterTextStub(object):
  """The interface to which stubs will conform."""
  __metaclass__ = abc.ABCMeta
  @abc.abstractmethod
  def Parse(self, request, timeout):
    raise NotImplementedError()
  Parse.future = None

def beta_create_TwitterText_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import parser_pb2
  import parser_pb2
  request_deserializers = {
    ('twittertext.TwitterText', 'Parse'): parser_pb2.TweetRequest.FromString,
  }
  response_serializers = {
    ('twittertext.TwitterText', 'Parse'): parser_pb2.ParsedResponse.SerializeToString,
  }
  method_implementations = {
    ('twittertext.TwitterText', 'Parse'): face_utilities.unary_unary_inline(servicer.Parse),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_TwitterText_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import parser_pb2
  import parser_pb2
  request_serializers = {
    ('twittertext.TwitterText', 'Parse'): parser_pb2.TweetRequest.SerializeToString,
  }
  response_deserializers = {
    ('twittertext.TwitterText', 'Parse'): parser_pb2.ParsedResponse.FromString,
  }
  cardinalities = {
    'Parse': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'twittertext.TwitterText', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
